# This is a basic workflow to help you get started with Actions

name: CI-Production-Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

#    env:
#      SERVER: techstack.ch

    strategy:
      matrix:
        #node-version: [ 12.x, 14.x, 15.x ]
        node-version: [ 15.x ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo "Log level: ${{ github.event.inputs.logLevel }}"
          echo "Tags: ${{ github.event.inputs.tags }}"

      - name: Run custom script
        run: sh ./custom.sh

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dep
        run: npm ci

      - name: Test App
        run: npm run test:ci

      - name: Build App
        run: npm run build --if-present

      - name: Display structure of generated files
        run: ls -ahl

      - name: Archive build
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: deploy_dist
          path: |
            dist

      - name: Archive code coverage result
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: deploy_coverage
          path: |
            coverage

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: deploy_dist
          path: github-actions_downloaded

      - name: Display structure of downloaded files
        run: ls -ahl

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: deploy_dist
          path: github-actions_downloaded

      - name: Display structure of downloaded files
        run: ls -ahl
        working-directory: github-actions_downloaded

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: main
          FOLDER: github-actions_downloaded

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: user/app:latest

# https://focisolutions.com/2020/04/github-actions-deploying-an-angular-app/
# https://github.com/marketplace/actions/deploy-to-github-pages
