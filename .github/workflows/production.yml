# This is a basic workflow to help you get started with Actions

name: CI-Production-Pipeline Production [Main]

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  schedule:
    - cron: "0 2 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

env:
  server: production

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: First job
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      name: ${{ github.actor }}

    strategy:
      matrix:
        #node-version: [ 12.x, 14.x, 15.x ]
        node-version: [ 15.x ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Weather App
      - name: Get Weather
        run: |
          curl -s --url 'https://api.openweathermap.org/data/2.5/weather?q=Budapest&appid=${{ secrets.OPENWEATHERMAP_TOKEN }}&units=metric'

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          echo Hello, world! Greetz $server by $name
          echo Commitd by: ${{ github.event.commits[0].author.name }}

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo ${{ github.event.inputs.logLevel }}
          echo ${{ github.event.inputs.tags }}
          echo ${{ steps.step_id.outputs.url_output }}

      - name: Run custom script
        run: sh ./custom.sh

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dep
        run: npm ci

      - name: Test App
        run: npm run test:ci

      - name: Build App
        run: npm run build --if-present

      - name: Display structure of generated files
        run: ls -ahl

      - name: Archive build
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: deploy_dist
          path: |
            dist

      - name: Archive code coverage result
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: deploy_coverage
          path: |
            coverage

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: deploy_dist
          path: github-actions_downloaded

      - name: Display structure of downloaded files
        run: ls -ahl

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          echo "$GITHUB_CONTEXT"

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
        run: |
          echo "$JOB_CONTEXT"

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
        run: |
          echo "$STEPS_CONTEXT"

      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
        run: |
          echo "$RUNNER_CONTEXT"

      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
        run: |
          echo "$STRATEGY_CONTEXT"

      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
        run: |
          echo "$MATRIX_CONTEXT"

  deploy:
    name: Second job
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: deploy_dist
          path: downloaded_artifact_deploy_dist

      - name: Display structure of downloaded files
        run: ls -ahl
        working-directory: downloaded_artifact_deploy_dist

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ##GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: downloaded_artifact_deploy_dist/github-actions

  deploy-to-google-app-engine:
    name: Deploy to Google App Engine
    runs-on: ubuntu-latest
    #needs: [ build ]
    environment:
      name: production_environment
      #url: ${{ steps.step_id.outputs.url_output }}
      url: https://ponyboy-curtis-3377.ew.r.appspot.com/
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: google-github-actions/setup-gcloud@master
        with:
          #version: '290.0.1'
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: false
      - id: Deploy
        uses: google-github-actions/deploy-appengine@main
        with:
          project_id: ponyboy-curtis-3377

  docker:
    name: Docker job
    # if: github.event_name == 'pull_request'
    # if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [ build, deploy-to-google-app-engine ]
    steps:

      - name: Checkout
        uses: actions/checkout@v2

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: deploy_dist
          path: downloaded_artifact_deploy_dist

      - name: Display structure of downloaded files
        run: ls -ahl

#      - name: Display structure of downloaded files
#        run: ls -ahl
#        working-directory: downloaded_artifact_deploy_dist

      - name: Kaniko build and push image verion ${{ github.run_number }}
        uses: aevea/action-kaniko@master
        with:
          registry: docker.pkg.github.com
          password: ${{ secrets.GITHUB_TOKEN }}
          image: gh-actions-test-app
          tag: v${{ github.run_number }}
          cache: true
          cache_registry: cache

  package:
    name: NPM job 1
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - run: npm ci
      - run: npm version prerelease --preid=ci-$GITHUB_RUN_ID --no-git-tag-version
      - run: npm pack
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: "*.tgz"

  publish-ghpr:
    name: NPM job 2
    runs-on: ubuntu-latest
    needs: [ package ]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: https://npm.pkg.github.com/

      - name: Dump env
        run: env | sort

      - name: Install Dependencies
        run: npm ci

      - name: Publish
        run: |
          npm version prerelease --preid=ci-$GITHUB_RUN_ID --no-git-tag-version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_PUBLISH}}

      - name: Test
        env:
          TEST_CONTEXT: ${{ contents('package.json') }}
        run: |
          echo "$TEST_CONTEXT"
